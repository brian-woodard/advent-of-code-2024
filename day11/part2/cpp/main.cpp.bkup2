#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <cstdint>
#include <cmath>
#include "Stopwatch.h"

void print(const std::vector<uint32_t>& Input)
{
   printf("Stones: ");
   for (size_t i = 0; i < Input.size(); i++)
   {
      printf("%d ", Input[i]);
   }
   printf("\n");
}

uint32_t num_digits(uint32_t Value)
{
#if 0
   uint32_t digits = 0;

   if (Value == 0)
      return 1;

   while (Value > 0)
   {
      digits++;
      Value /= 10;
   }

   return digits;
#else
   if (Value < 10)
      return 1;
   else if (Value < 100)
      return 2;
   else if (Value < 1000)
      return 3;
   else if (Value < 10000)
      return 4;
   else if (Value < 100000)
      return 5;
   else if (Value < 1000000)
      return 6;
   else if (Value < 10000000)
      return 7;
   else if (Value < 100000000)
      return 8;
   else if (Value < 1000000000)
      return 9;
   else if (Value < 10000000000)
      return 10;
#endif
}

void split(uint64_t& Num1, uint64_t& Num2, uint32_t Digits)
{
   uint64_t value = Num1;
   uint64_t value_hi = 0;
   uint64_t value_lo = 0;

   uint32_t mag = 1;

#if 0
   for (uint32_t i = 0; i < Digits; i++)
   {
      if (i == Digits / 2)
         mag = 1;

      if (i < Digits / 2)
      {
         value_lo += (value % 10) * mag;
         mag *= 10;
         value /= 10;
      }
      else
      {
         value_hi += (value % 10) * mag;
         mag *= 10;
         value /= 10;
      }
   }
#else
   //uint32_t half_digits = Digits / 2;
   uint32_t half_digits = Digits >> 1;

#if 1
   for (uint32_t i = 0; i < half_digits; i++)
   {
      mag *= 10;
   }
#else
   mag = pow(10, half_digits);
#endif

   value_hi = value / mag;
   value_lo = value % mag;
#endif

   Num1 = value_hi;
   Num2 = value_lo;
}

uint64_t max_blinks;
uint64_t count = 0;

uint64_t blink_recursive(int Count, uint64_t Num)
{
   if (Count > max_blinks)
   {
      return 1;
   }
   else if (Count == max_blinks)
   {
      count++;
   }

   if (Num != 0)
   {
      uint32_t digits = num_digits(Num);

      //if (digits % 2 != 0)
      if (digits & 0x1 != 0)
      {
         uint64_t new_value = Num * 2024;
         return blink_recursive(Count + 1, new_value);
      }
      else
      {
         uint64_t result = 0;
         uint64_t num2 = 0;

         // split into two stones
         split(Num, num2, digits);

         result = blink_recursive(Count + 1, Num);
         result += blink_recursive(Count + 1, num2);
         return result;
      }
   }
   else
   {
      return blink_recursive(Count + 1, 1);
   }
}

int main()
{
   //print(input);

   printf("Start blinking...\n");

   double time_sec = 0.0;
   uint64_t result = 0;
   max_blinks = 68;

   {
      CStopwatch timer(&time_sec);
      result = blink_recursive(1, 0);
   }

   printf("Result: %ld (%ld blinks) took %d minutes %.2f secs count %ld\n",
      result,
      max_blinks,
      (int)time_sec / 60,
      fmod(time_sec, 60.0),
      count);
}

// Single threaded 55 blinks with small.txt
// [sim_local@localhost cpp]$ time ./main 
// Stones: 0 
// Result: 5362947711
// 
// real	1m16.187s
// user	1m11.103s
// sys	0m0.004s

// Single threaded 56 blinks with small.txt
// [sim_local@localhost cpp]$ time ./main
// Stones: 0
// Result: 8161193535
// 
// real	1m36.532s
// user	1m31.443s
// sys	0m0.005s

// Single threaded 60 blinks with small.txt
// [sim_local@localhost cpp]$ time ./main
// Stones: 0
// Result: 43369895096
// 
// real	5m5.334s
// user	4m58.856s
// sys	0m0.001s

// TODO: Try multi-threading on input.txt, one thread for each starting stone
